name: Checkmarx AST Scan
on:
   pull_request:
     branches:
       - main
       - dev
       - test

jobs:
   AST_Scan:
      permissions:
          contents: read # for actions/checkout to fetch code
          security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
          actions: read # only required for a private repository by github/codeql-action/upload-sarif
      runs-on: ubuntu-latest
      steps:
           - name: Checkout repository
             uses: actions/checkout@v3.5.2
           # You may pin to the exact commit or the version.
           # uses: Checkmarx/ast-github-action@3bbaca0807ff5abd587965391138479c23b7b369
           - name: AST Scan
             uses: Checkmarx/ast-github-action@2.0.18
             with:
               # Provide the AST portal URL
               base_uri: https://anz.ast.checkmarx.net/
               # Provide the Tenant for AST portal URL
               cx_tenant: ${{ secrets.CHKMX_TENANT}}
               # Client ID for AST portal authentication
               cx_client_id: ${{ secrets.CHKMX_CLIENTID}}
               # Secret key for AST portal authentication
               cx_client_secret: ${{ secrets.CHKMX_SECRET}}
               additional_params: --report-format sarif --output-path .
           
           - name: Upload Sarif Report to Workflow
             uses: actions/upload-artifact@v3
             with:
              name: cx_result
              path: cx_result.sarif #/home/runner/work/**/*.sarif
              
           - name: Upload SARIF file
             uses: github/codeql-action/upload-sarif@v2
             with:
               sarif_file: cx_result.sarif

   Download_Results:
      runs-on: ubuntu-latest
      needs: AST_Scan
      steps:
         - name: Download and read results
           uses: actions/download-artifact@v3
           with:
            name: cx_result
            #path: ..../${{ github.repository }}/results
         - shell: bash
           run: |
              report=`cat cx_result.sarif`
              results=$(cat $report | jq -r `.runs[].tool.results[].ruleId`) 
              
              #results=$(cat cx_result.sarif | jq -r `.runs[].tool.results[].ruleId`)
              echo $results

              resultsArray=($results)

              echo "${resultsArray[*]}"

              highCount=0
              mediumCount=0
              noteCount=0

              for var in "${resultsArray[@]}"
              do
                severity=$(cat cx_result.sarif | jq -r `.runs[].tool.driver.rules[] | select(.id=="'$var'").properties."level"`)
                echo "${var} | $severity"
                if [ "$severity" == "high" ]; then let highCount+=1; fi
                if [ "$severity" == "medium" ]; then let mediumCount+=1; fi
                if [ "$severity" == "warning" ]; then let noteCount+=1; fi
              done

              echo ""
              echo "High Count:"
              echo $highCount
              echo "Medium Count:" 
              echo $mediumCount
              echo "Warning Count:"
              echo $noteCount
              echo ""

              #if (( $highCount > 0 )); then
              #    echo "errors found - failing detect error check..."
              #    exit -1
              #fi

              #if (( $warningCount > 0 )); then
              #    echo "warnings found - failing detect warning check..."
              #    exit -1
              #fi   
