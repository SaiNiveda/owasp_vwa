name: Checkmarx AST Scan
on:
   pull_request:
     branches:
       - main
       - dev
       - test

jobs:
   AST_Scan:
      permissions:
          contents: read # for actions/checkout to fetch code
          security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
          actions: read # only required for a private repository by github/codeql-action/upload-sarif
      runs-on: ubuntu-latest
      steps:
           - name: Checkout repository
             uses: actions/checkout@v3.5.2
           # You may pin to the exact commit or the version.
           # uses: Checkmarx/ast-github-action@3bbaca0807ff5abd587965391138479c23b7b369
           - name: AST Scan
             uses: Checkmarx/ast-github-action@2.0.18
             with:
               # Provide the AST portal URL
               base_uri: https://anz.ast.checkmarx.net/
               # Provide the Tenant for AST portal URL
               cx_tenant: ${{ secrets.CHKMX_TENANT}}
               # Client ID for AST portal authentication
               cx_client_id: ${{ secrets.CHKMX_CLIENTID}}
               # Secret key for AST portal authentication
               cx_client_secret: ${{ secrets.CHKMX_SECRET}}
               additional_params: --report-format sarif --output-path .
           
           - name: Upload Sarif Report to Workflow
             uses: actions/upload-artifact@v3
             with:
              name: cx_result
              path: cx_result.sarif #/home/runner/work/**/*.sarif
              
           - name: Upload SARIF file
             uses: github/codeql-action/upload-sarif@v2
             with:
               sarif_file: cx_result.sarif

   Parse_Results:
      runs-on: ubuntu-latest
      needs: AST_Scan
      steps:
         - name: Download results
           uses: actions/download-artifact@v3
           with:
            name: cx_result
            #path: ..../${{ github.repository }}/results
         - name: Parse Results
           run: |
              
              #Get counts per engine
               sastCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(sast)"))] | length' cx_result.sarif)
               kicsCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(kics)"))] | length' cx_result.sarif)
               scaCount==$(jq '[.runs[].results[] | select(.ruleId | contains ("(sca)"))] | length' cx_result.sarif)
               #***need to check api's detected + count with another report
               apisecCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(apisec)"))] | length' cx_result.sarif)

               #Get counts per severity
               highCount=$(jq '[.runs[].results[] | select(.level=="error")] | length' cx_result.sarif)
               mediumCount=$(jq '[.runs[].results[] | select(.level=="warning")] | length' cx_result.sarif)
               #***need to check actual levels with another report
               lowCount=$(jq '[.runs[].results[] | select(.level=="low")] | length' cx_result.sarif)
               infoCount=$(jq '[.runs[].results[] | select(.level=="info")] | length' cx_result.sarif)

              #gets and splits list of rule names
              IFS=$'\n' nameResults=$(jq -r -c .runs[].tool.driver.rules[].name cx_result.sarif)
              nameArray=($nameResults)

              #cat > EmailContent.html
                 echo "<!DOCTYPE html>" > EmailContent.html
                 echo "<html lang=en>" >> EmailContent.html
                 echo "<head>" >> EmailContent.html
                 echo "<meta http-equiv=Content-Type content=text/html; charset=utf-8 />" >> EmailContent.html
                 echo "<meta name=viewport content=width=device-width>" >> EmailContent.html
                 echo "</head>" >> EmailContent.html
                 echo "<body>" >> EmailContent.html
                 #EOF

                  if (( $highCount > 0 ) || (warningCount>0)); then
                     echo "<div>run ${{github.run_number}} build failed with <b style=color: ##00ff00;  font-family:Arial;>high risk security</b> violations</div>" >> EmailContent.html
                  #else
                     #echo "<div>${{github.run_number}} build succeeded</div>"
                     #echo "</body>"
                     #EOF
                     #exit 0
                  fi
                  echo "<div style=font-size:14px; font-weight: bold;>Scan result summary</div>"  >> EmailContent.html
                  echo "<table role=presentation; border=0; align=right; cellspacing=0>"  >> EmailContent.html
                  echo "<tr><td style=font-weight: bold;>Sast</td><td style=font-weight: bold;>IaC</td><td style=font-weight: bold;>SCA</td></tr>"  >> EmailContent.html
                  echo "<tr><td>${sastCount}</td><td>${kicsCount}</td><td>${scaCount}</td></tr>"  >> EmailContent.html
                  echo "</table>"  >> EmailContent.html
                  echo "" >> EmailContent.html
                  echo "<div  style=font-size:14px; font-weight: bold;>Scan result per severity</div>"  >> EmailContent.html
                  echo "" >> EmailContent.html
                  echo "<table role=presentation; border=0; align=right; cellspacing=0>" >> EmailContent.html
                  echo "<tr><td style=font-weight: bold;>High</td><td style=font-weight: bold;>Warning</td><td style=font-weight: bold;>Low</td><td style=font-weight: bold;>Info</td></tr>" >> EmailContent.html
                  echo "<tr><td>${highCount}</td><td>${mediumCount}</td><td>${lowCount}</td><td>${infoCount}</td></tr>" >> EmailContent.html
                  echo "</table>" >> EmailContent.html
                  echo "" >> EmailContent.html
                  echo "<div style=font-size:14px; font-weight: bold;>Scan results per vulverability</div>" >> EmailContent.html
                  echo "<table role=presentation; border=0; align=right; cellspacing=0>" >> EmailContent.html
                  echo "<tr><td style=font-weight: bold;>Vulnerability</td><td style=font-weight: bold;>Count</td></tr>" >> EmailContent.html

                  for violation in "${nameArray[@]}"
                  do
                     vulnerabilityCount=$(jq --args VIOLATION $violation '[.runs[].results[] | select(.message.text==$VIOLATION)] | length' cx_result.sarif)
                     echo "<tr><td>${violation}</td><td>${vulnerabilityCount}</td></tr>" >> EmailContent.html
                  done
                  echo "</table>" >> EmailContent.html

                  echo "</body></html>" >> EmailContent.html
               
              
              #build

              #if (( $highCount > 0 )); then
              #    echo "errors found - failing detect error check..."
              #    exit -1
              #fi

              #if (( $warningCount > 0 )); then
              #    echo "warnings found - failing detect warning check..."
              #    exit -1
              #fi
              
         - name: Upload email content to workflow
           uses: actions/upload-artifact@v3
           with:
              name: htmlReport
              path: EmailContent.html
