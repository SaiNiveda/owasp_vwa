name: Checkmarx AST Scan
on:
   pull_request:
     branches:
       - main
       - dev
       - test

jobs:
   AST_Scan:
      permissions:
          contents: read # for actions/checkout to fetch code
          security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
          actions: read # only required for a private repository by github/codeql-action/upload-sarif
      runs-on: ubuntu-latest
      steps:
           - name: Checkout repository
             uses: actions/checkout@v3.5.2
           # You may pin to the exact commit or the version.
           # uses: Checkmarx/ast-github-action@3bbaca0807ff5abd587965391138479c23b7b369
           - name: AST Scan
             uses: Checkmarx/ast-github-action@2.0.18
             with:
               # Provide the AST portal URL
               base_uri: https://anz.ast.checkmarx.net/
               # Provide the Tenant for AST portal URL
               cx_tenant: ${{ secrets.CHKMX_TENANT}}
               # Client ID for AST portal authentication
               cx_client_id: ${{ secrets.CHKMX_CLIENTID}}
               # Secret key for AST portal authentication
               cx_client_secret: ${{ secrets.CHKMX_SECRET}}
               additional_params: --report-format sarif --output-path .
           
           - name: Upload Sarif Report to Workflow
             uses: actions/upload-artifact@v3
             with:
              name: cx_result
              path: cx_result.sarif #/home/runner/work/**/*.sarif
              
           - name: Upload SARIF file
             uses: github/codeql-action/upload-sarif@v2
             with:
               sarif_file: cx_result.sarif

   Parse_Results:
      runs-on: ubuntu-latest
      needs: AST_Scan
      outputs:
         high: ${{ steps.Interpret_Results.outputs.highCount }}
         med: ${{ steps.Interpret_Results.outputs.mediumCount }}
      steps:
         - name: Download results
           uses: actions/download-artifact@v3
           with:
            name: cx_result
            
         - name: Interpret_Results
           run: |
           
               #Set html Styles
               tableStyle="border-width:2px;border-style:solid;border-color:#7A7A7A;border-collapse:collapse;border-spacing:2px;padding-top:5px;padding-bottom:5px;padding-right:5px;padding-left:5px;"
               thStyle="border-width:2px;border-style:solid;border-color:#5872F3;padding-top:5px;padding-bottom:5px;padding-right:5px;padding-left:5px;background-color:#A6D2DD;"
               tdStyle="border-width:2px;border-style:solid;border-color:#7A7A7A;text-align:center;padding-top:5px;padding-bottom:5px;padding-right:5px;padding-left:5px;"
               
               #Get counts per engine
               sastCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(sast)"))] | length' cx_result.sarif)
               kicsCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(kics)"))] | length' cx_result.sarif)
               scaCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(sca)"))] | length' cx_result.sarif)
               #***need to check api's detected + count with another report
               apisecCount=$(jq '[.runs[].results[] | select(.ruleId | contains ("(apisec)"))] | length' cx_result.sarif)
               
               #Get counts per severity
               highCount=$(jq '[.runs[].results[] | select(.level=="error")] | length' cx_result.sarif)
               mediumCount=$(jq '[.runs[].results[] | select(.level=="warning")] | length' cx_result.sarif)
               #***need to check actual levels with another report
               lowCount=$(jq '[.runs[].results[] | select(.level=="low")] | length' cx_result.sarif)
               infoCount=$(jq '[.runs[].results[] | select(.level=="info")] | length' cx_result.sarif)
               
               #Set Outputs
               echo "${highCount}" >> "$GITHUB_OUTPUT"
               echo "${mediumCount}" >> "$GITHUB_OUTPUT"
               
               #gets and splits list of rule names
               IFS=$'\n' nameResults=$(jq -r -c .runs[].tool.driver.rules[].name cx_result.sarif)
               nameArray=($nameResults)
              
               echo "<!DOCTYPE html>" > EmailContent.html
               echo "<html lang=en>" >> EmailContent.html
               echo "<head>" >> EmailContent.html
               echo "<meta http-equiv=Content-Type content=text/html; charset=utf-8 />" >> EmailContent.html
               echo "<meta name=viewport content=width=device-width>" >> EmailContent.html
               echo "</head>" >> EmailContent.html
               echo "<body>" >> EmailContent.html
                 
               if (($highCount>0) || ($warningCount>0)); then
                  echo "<div>${{ github.repository }} | PR:${{ github.event.pull_request.number }} | Run:${{github.run_number}} Status: <b style=color:red>High Risk</b></div>" >> EmailContent.html
               fi
               echo "<div style=font-size:14px><b>Scan result summary</b></div>"  >> EmailContent.html
               echo "<table style=\"${tableStyle}\">"  >> EmailContent.html
               echo "<tr><th style=\"${thStyle}\">Sast</th><th style=\"${thStyle}\">IaC</th><th style=\"${thStyle}\">SCA</th></tr>"  >> EmailContent.html
               echo "<tr><td style=\"${tdStyle}\">${sastCount}</td><td style=\"${tdStyle}\">${kicsCount}</td><td style=\"${tdStyle}\">${scaCount}</td></tr>"  >> EmailContent.html
               echo "</table>"  >> EmailContent.html
               echo "<br />" >> EmailContent.html
               echo "<div style=font-weight:bold>Scan result per severity</div>"  >> EmailContent.html
               echo "<table style=\"${tableStyle}\">" >> EmailContent.html
               echo "<tr><th style=\"${thStyle}\">High</th><th style=\"${thStyle}\">Warning</th><th style=\"${thStyle}\">Low</th><th style=\"${thStyle}\">Info</th></tr>" >> EmailContent.html
               echo "<tr><td style=\"${tdStyle}\">${highCount}</td><td style=\"${tdStyle}\"}>${mediumCount}</td><td style=\"${tdStyle}\">${lowCount}</td><td style=\"${tdStyle}\">${infoCount}</td></tr>" >> EmailContent.html
               echo "</table>" >> EmailContent.html
               echo "<br />" >> EmailContent.html
               echo "<div style=font-weight:bold>Scan results per vulnerability</div>" >> EmailContent.html
               echo "<table style=\"${tableStyle}\"}>" >> EmailContent.html
               echo "<tr><th style=\"${thStyle}\"}>Vulnerability</th><th style=\"${thStyle}\">Count</th></tr>" >> EmailContent.html
               for violation in "${nameArray[@]}"
               do
                  vulnerabilityCount=$(jq --arg var "$violation" '[.runs[].results[] | select(.message.text==$var)] | length' cx_result.sarif)
                  echo "<tr><td style=\"${tdStyle}\">${violation}</td><td style=\"${tdStyle}\">${vulnerabilityCount}</td></tr>" >> EmailContent.html
               done
               echo "</table>" >> EmailContent.html
               echo "</body></html>" >> EmailContent.html
              

              
         - name: Upload email content to workflow
           uses: actions/upload-artifact@v3
           with:
              name: htmlReport
              path: EmailContent.html
              
   
   Build:
      runs-on: ubuntu-latest
      needs: Parse_Results
      steps:
         - env:
            HIGH: ${{needs.Parse_Results.Interpret_Results.highCount}}
            MED: ${{needs.Parse_Results.Interpret_Results.mediumCount}}
      
         - name: Download html email content
           uses: actions/download-artifact@v3
           with:
            name: htmlReport
         
         - name: Send mail
           uses: dawidd6/action-send-mail@v3
           if: $HIGH>0 || $MED>0
           with:
                
                # Required mail server address if not connection_url:
                server_address: smtp.gmail.com
                # Server port, default 25:
                server_port: 465
                # Optional whether this connection use TLS (default is true if server_port is 465)
                secure: true
                # Optional (recommended) mail server username:
                username: ${{secrets.MAIL_USERNAME}}
                # Optional (recommended) mail server password:
                password: ${{secrets.MAIL_PASSWORD}}
                # Required mail subject:
                subject: Github Actions job result
                # Required recipients' addresses:
                to: sai.for.newsletters@gmail.com
                # Required sender full name (address can be skipped):
                from: Sai Niveda # <user@example.com>
                # Optional plain body:
                body: Build job of ${{github.repository}} stopped!
                # Optional HTML body read from file:
                html_body: file://EmailContent.html 
                # Optional unsigned/invalid certificates allowance:
                ignore_cert: true
                # Optional converting Markdown to HTML (set content_type to text/html too):
                convert_markdown: true
                # Optional attachments:
                #attachments: #attachments.zip,git.diff,./dist/static/*.js
                # Optional priority: 'high', 'normal' (default) or 'low'
                priority: normal
